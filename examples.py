"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏.
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–µ–∑ GUI.
"""

from logic import (
    GameLogic, Ball, Color, ColorMixer,
    create_predefined_colors, Inventory
)
import time


def example_1_basic_game():
    """–ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–∞—è –∏–≥—Ä–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —à–∞—Ä–∏–∫–∞–º–∏."""
    print("\n" + "="*60)
    print("–ü–†–ò–ú–ï–† 1: –ë–∞–∑–æ–≤–∞—è –∏–≥—Ä–∞")
    print("="*60 + "\n")
    
    # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
    game = GameLogic(800, 600)
    
    # –î–æ–±–∞–≤–ª—è–µ–º 3 —à–∞—Ä–∏–∫–∞
    colors = create_predefined_colors()
    
    ball1 = Ball(100, 100, 2, 1, 20, colors['red'])
    ball2 = Ball(200, 150, -1, 2, 25, colors['blue'])
    ball3 = Ball(300, 200, 1, -1, 22, colors['green'])
    
    game.add_ball(ball1)
    game.add_ball(ball2)
    game.add_ball(ball3)
    
    print(f"‚úì –°–æ–∑–¥–∞–Ω–æ {game.get_ball_count()} —à–∞—Ä–∏–∫–æ–≤")
    print(f"  –®–∞—Ä–∏–∫ 1: –ø–æ–∑–∏—Ü–∏—è ({ball1.x}, {ball1.y}), —Ü–≤–µ—Ç {ball1.color.to_hex()}")
    print(f"  –®–∞—Ä–∏–∫ 2: –ø–æ–∑–∏—Ü–∏—è ({ball2.x}, {ball2.y}), —Ü–≤–µ—Ç {ball2.color.to_hex()}")
    print(f"  –®–∞—Ä–∏–∫ 3: –ø–æ–∑–∏—Ü–∏—è ({ball3.x}, {ball3.y}), —Ü–≤–µ—Ç {ball3.color.to_hex()}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º 5 —à–∞–≥–æ–≤
    print("\n–°–∏–º—É–ª—è—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è...")
    for i in range(5):
        game.update(dt=1.0)
        print(f"  –®–∞–≥ {i+1}: –®–∞—Ä–∏–∫ 1 —Ç–µ–ø–µ—Ä—å –≤ ({ball1.x:.1f}, {ball1.y:.1f})")


def example_2_color_mixing():
    """–ü—Ä–∏–º–µ—Ä 2: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–º–µ—à–∏–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤."""
    print("\n" + "="*60)
    print("–ü–†–ò–ú–ï–† 2: –°–º–µ—à–∏–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤")
    print("="*60 + "\n")
    
    mixer = ColorMixer()
    colors = create_predefined_colors()
    
    test_pairs = [
        ('red', 'blue', '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π'),
        ('red', 'yellow', '–æ—Ä–∞–Ω–∂–µ–≤—ã–π'),
        ('blue', 'yellow', '–∑–µ–ª–µ–Ω—ã–π'),
        ('red', 'green', '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π/–∂–µ–ª—Ç—ã–π'),
        ('cyan', 'magenta', '—Å–∏–Ω–∏–π'),
    ]
    
    print("–¢–∞–±–ª–∏—Ü–∞ —Å–º–µ—à–∏–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤:\n")
    print(f"{'–¶–≤–µ—Ç 1':<10} {'Hex 1':<10} + {'–¶–≤–µ—Ç 2':<10} {'Hex 2':<10} = {'–†–µ–∑—É–ª—å—Ç–∞—Ç':<10} {'–û–∂–∏–¥–∞–µ—Ç—Å—è':<15}")
    print("-" * 90)
    
    for color1_name, color2_name, expected in test_pairs:
        color1 = colors[color1_name]
        color2 = colors[color2_name]
        result = mixer.mix_colors(color1, color2)
        
        print(f"{color1_name:<10} {color1.to_hex():<10} + "
              f"{color2_name:<10} {color2.to_hex():<10} = "
              f"{result.to_hex():<10} ({expected})")


def example_3_inventory():
    """–ü—Ä–∏–º–µ—Ä 3: –†–∞–±–æ—Ç–∞ —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º."""
    print("\n" + "="*60)
    print("–ü–†–ò–ú–ï–† 3: –°–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
    print("="*60 + "\n")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–∞ 5 —Å–ª–æ—Ç–æ–≤
    inventory = Inventory(max_size=5)
    colors = create_predefined_colors()
    
    print(f"–°–æ–∑–¥–∞–Ω –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: {inventory.size()}/{inventory.max_size} —à–∞—Ä–∏–∫–æ–≤")
    print(f"–ü—É—Å—Ç? {inventory.is_empty()}")
    print(f"–ü–æ–ª–æ–Ω? {inventory.is_full()}\n")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —à–∞—Ä–∏–∫–∏
    print("–î–æ–±–∞–≤–ª—è–µ–º —à–∞—Ä–∏–∫–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:")
    for i, (name, color) in enumerate(list(colors.items())[:6]):
        ball = Ball(0, 0, 0, 0, 20, color)
        success = inventory.add_ball(ball)
        
        if success:
            print(f"  ‚úì –î–æ–±–∞–≤–ª–µ–Ω {name} —à–∞—Ä–∏–∫ ({color.to_hex()})")
        else:
            print(f"  ‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {name} —à–∞—Ä–∏–∫ - –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω!")
    
    print(f"\n–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {inventory.size()}/{inventory.max_size} —à–∞—Ä–∏–∫–æ–≤")
    print(f"–ü–æ–ª–æ–Ω? {inventory.is_full()}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —à–∞—Ä–∏–∫
    print("\n–ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞—Ä–∏–∫...")
    ball = inventory.pop_ball()
    if ball:
        print(f"  ‚úì –ò–∑–≤–ª–µ—á–µ–Ω —à–∞—Ä–∏–∫ —Ü–≤–µ—Ç–∞ {ball.color.to_hex()}")
        print(f"  –û—Å—Ç–∞–ª–æ—Å—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: {inventory.size()}")


def example_4_collision():
    """–ü—Ä–∏–º–µ—Ä 4: –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ –∏ —Å–º–µ—à–∏–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤."""
    print("\n" + "="*60)
    print("–ü–†–ò–ú–ï–† 4: –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —à–∞—Ä–∏–∫–æ–≤")
    print("="*60 + "\n")
    
    game = GameLogic(800, 600)
    colors = create_predefined_colors()
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —à–∞—Ä–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–ª–∫–Ω—É—Ç—Å—è
    ball1 = Ball(100, 100, 3, 0, 25, colors['red'])
    ball2 = Ball(200, 100, -3, 0, 25, colors['blue'])
    
    game.add_ball(ball1)
    game.add_ball(ball2)
    
    print(f"–ù–∞—á–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞:")
    print(f"  –®–∞—Ä–∏–∫ 1 (–∫—Ä–∞—Å–Ω—ã–π): {ball1.color.to_hex()}")
    print(f"  –®–∞—Ä–∏–∫ 2 (—Å–∏–Ω–∏–π): {ball2.color.to_hex()}")
    print(f"\n–®–∞—Ä–∏–∫–∏ –¥–≤–∏–≥–∞—é—Ç—Å—è –Ω–∞–≤—Å—Ç—Ä–µ—á—É –¥—Ä—É–≥ –¥—Ä—É–≥—É...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
    for i in range(20):
        game.update(dt=1.0)
        
        distance = ball1.distance_to(ball2)
        if i % 5 == 0:
            print(f"  –®–∞–≥ {i}: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ = {distance:.1f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ
        if ball1.is_touching(ball2):
            print(f"\n‚úì –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ –Ω–∞ —à–∞–≥–µ {i}!")
            print(f"  –ù–æ–≤—ã–π —Ü–≤–µ—Ç –æ–±–æ–∏—Ö —à–∞—Ä–∏–∫–æ–≤: {ball1.color.to_hex()}")
            break


def example_5_delete_zone():
    """–ü—Ä–∏–º–µ—Ä 5: –ó–æ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è."""
    print("\n" + "="*60)
    print("–ü–†–ò–ú–ï–† 5: –ó–æ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è")
    print("="*60 + "\n")
    
    game = GameLogic(800, 600)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–æ–Ω—É —É–¥–∞–ª–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
    game.set_delete_zone(700, 500, 100, 100)
    
    print(f"–ó–æ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è: ({game.delete_zone.x}, {game.delete_zone.y}) "
          f"—Ä–∞–∑–º–µ—Ä {game.delete_zone.width}x{game.delete_zone.height}")
    
    # –°–æ–∑–¥–∞–µ–º —à–∞—Ä–∏–∫–∏
    colors = create_predefined_colors()
    
    # –®–∞—Ä–∏–∫ –≤–Ω–µ –∑–æ–Ω—ã
    ball1 = Ball(100, 100, 0, 0, 20, colors['red'])
    # –®–∞—Ä–∏–∫ –≤ –∑–æ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è
    ball2 = Ball(750, 550, 0, 0, 20, colors['blue'])
    # –®–∞—Ä–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–π–¥–µ—Ç –≤ –∑–æ–Ω—É
    ball3 = Ball(650, 550, 5, 0, 20, colors['green'])
    
    game.add_ball(ball1)
    game.add_ball(ball2)
    game.add_ball(ball3)
    
    print(f"\n–®–∞—Ä–∏–∫–æ–≤ –Ω–∞ –ø–æ–ª–µ: {game.get_ball_count()}")
    print(f"  –®–∞—Ä–∏–∫ 1: ({ball1.x}, {ball1.y}) - –≤–Ω–µ –∑–æ–Ω—ã")
    print(f"  –®–∞—Ä–∏–∫ 2: ({ball2.x}, {ball2.y}) - –í –ó–û–ù–ï –£–î–ê–õ–ï–ù–ò–Ø")
    print(f"  –®–∞—Ä–∏–∫ 3: ({ball3.x}, {ball3.y}) - –¥–≤–∏–≥–∞–µ—Ç—Å—è –∫ –∑–æ–Ω–µ")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É
    print("\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã (—É–¥–∞–ª–µ–Ω–∏–µ —à–∞—Ä–∏–∫–æ–≤ –≤ –∑–æ–Ω–µ)...")
    game.update(dt=1.0)
    
    print(f"–®–∞—Ä–∏–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {game.get_ball_count()}")
    
    # –ï—â—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤
    for i in range(15):
        game.update(dt=1.0)
        if i % 5 == 4:
            print(f"  –®–∞–≥ {i+1}: —à–∞—Ä–∏–∫–æ–≤ = {game.get_ball_count()}")


def example_6_suck_and_spit():
    """–ü—Ä–∏–º–µ—Ä 6: –í—Å–∞—Å—ã–≤–∞–Ω–∏–µ –∏ –≤—ã–ø–ª–µ–≤—ã–≤–∞–Ω–∏–µ —à–∞—Ä–∏–∫–æ–≤."""
    print("\n" + "="*60)
    print("–ü–†–ò–ú–ï–† 6: –í—Å–∞—Å—ã–≤–∞–Ω–∏–µ –∏ –≤—ã–ø–ª–µ–≤—ã–≤–∞–Ω–∏–µ")
    print("="*60 + "\n")
    
    game = GameLogic(800, 600)
    colors = create_predefined_colors()
    
    # –°–æ–∑–¥–∞–µ–º —à–∞—Ä–∏–∫
    ball = Ball(100, 100, 0, 0, 20, colors['red'])
    game.add_ball(ball)
    
    print(f"–®–∞—Ä–∏–∫–æ–≤ –Ω–∞ –ø–æ–ª–µ: {game.get_ball_count()}")
    print(f"–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: {game.get_inventory_count()}")
    print(f"–®–∞—Ä–∏–∫ –≤ –ø–æ–∑–∏—Ü–∏–∏ ({ball.x}, {ball.y})")
    
    # –í—Å–∞—Å—ã–≤–∞–µ–º —à–∞—Ä–∏–∫
    print(f"\n–í—Å–∞—Å—ã–≤–∞–µ–º —à–∞—Ä–∏–∫ (–∫–ª–∏–∫ –≤ –ø–æ–∑–∏—Ü–∏–∏ {ball.x}, {ball.y})...")
    success = game.suck_ball_at_position(ball.x, ball.y)
    
    if success:
        print(f"  ‚úì –®–∞—Ä–∏–∫ –≤—Å–æ—Å–∞–Ω!")
        print(f"  –®–∞—Ä–∏–∫–æ–≤ –Ω–∞ –ø–æ–ª–µ: {game.get_ball_count()}")
        print(f"  –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: {game.get_inventory_count()}")
    
    # –í—ã–ø–ª–µ–≤—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    print(f"\n–í—ã–ø–ª–µ–≤—ã–≤–∞–µ–º —à–∞—Ä–∏–∫ –≤ —Ü–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞...")
    success = game.spit_ball_at_position(400, 300, vx=2, vy=-2)
    
    if success:
        new_ball = game.balls[-1]
        print(f"  ‚úì –®–∞—Ä–∏–∫ –≤—ã–ø–ª—é–Ω—É—Ç!")
        print(f"  –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: ({new_ball.x}, {new_ball.y})")
        print(f"  –ù–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ({new_ball.vx}, {new_ball.vy})")
        print(f"  –®–∞—Ä–∏–∫–æ–≤ –Ω–∞ –ø–æ–ª–µ: {game.get_ball_count()}")


def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã."""
    print("\n" + "üéÆ " * 20)
    print("–ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ò–ì–†–û–í–û–ô –õ–û–ì–ò–ö–ò")
    print("üéÆ " * 20)
    
    examples = [
        example_1_basic_game,
        example_2_color_mixing,
        example_3_inventory,
        example_4_collision,
        example_5_delete_zone,
        example_6_suck_and_spit,
    ]
    
    for i, example in enumerate(examples, 1):
        example()
        
        if i < len(examples):
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞...")
    
    print("\n" + "="*60)
    print("‚úì –í–°–ï –ü–†–ò–ú–ï–†–´ –ó–ê–í–ï–†–®–ï–ù–´!")
    print("="*60)
    print("\n–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É —Å GUI, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print("  python3 game_gui.py\n")


if __name__ == "__main__":
    main()

